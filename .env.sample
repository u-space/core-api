# Port where the rest api is going to listen for https requests
PORT=

# Port where the rest api is going to listen for http requests
HTTP_PORT=

# Path to the certificate that is going to be used to encrypt the requests and responses
SSL_CERT=

# Path to the certificate private key
SSL_KEY=

# Secret string to generate the json web tokens (jwt)
JWTSECRET=

# Eg: "2 days", "10h", "7d". Be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default ("120" is equal to "120ms").
JWT_EXPIRATION_TIME=

# SMTP config used to send the emails
SMTP_URL=
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_PORT=
# true or false
SMTP_SECURE=
# true or false
SMTP_SELF_SIGNED=

# It can be true or false. If true, you don't need to complete the SMTP configuration
MOCK_MAIL_API=

# Web frontend url
FRONT_END_URL=

# Url to access to this rest api
BACKEND_URL=

# authentication-api url
MICROUTM_AUTH_URL=

# admin email
ADMIN_EMAIL=

# Name of the connection you want to use from the ormconfig.json
INSTANCE=

# Path to the user controller extension
USER_CONTROLLER_EXTENSION=

# Path to the vehicle controller extension
VEHICLE_CONTROLLER_EXTENSION=

# Modules
MODULES_TRACKERS=
MODULES_CENTRAL=
MODULES_SURVEILLANCE=

# Google API Key
GOOGLE_API=

# MQTT Server configuration
MQTT_ENABLED=
MQTT_ENDPOINT=
MQTT_USER=
MQTT_PASS=

# true if you want to mock the auth server
MOCK_AUTH_SERVER_API=

# Path to json file where is defined the user extra fields schema
USER_EXTRA_FIELDS_SCHEMA=

# Path to json file where is defined the user document extra fields schema
USER_DOCUMENT_EXTRA_FIELDS_SCHEMA=

# Path to json file where is defined the vehicle extra fields schema
VEHICLE_EXTRA_FIELDS_SCHEMA=

# Path to json file where is defined the vehicle document extra fields schema
VEHICLE_DOCUMENT_EXTRA_FIELDS_SCHEMA=

# The name of the company that is deploying the instance
COMPANY_NAME=

# The name of the app
APP_NAME=

# The support email in case any user has a problem with the software
SUPPORT_EMAIL=

# false to disable the cronjob that checks if there is some operation that has to change the sate.
# In production it must be true
CRONJOB_ENABLED=

# Path to the folder where the app is going to save the documents uploaded
UPLOAD_FOLDER=

# State that operations take after PROPOSED (if the operation does not intersect with other operations, rfvs or uvrs)
# Accepted values: ACCEPTED | PENDING
# Default value: PENDING
OPERATION_DEFAULT_STATE=

# true or false, depending if users have to pay or not for the operations
OPERATION_PAYMENT_THROW_THE_APP=

# Set it 'true' if you want the backend checks when a new operation is inserted if it intersects
# with other entities (operations, uvrs, rfvs), and in case it doesn't, save it ACTIVATED
# or ACCEPTED (depending if begin datetime is < now).
# Set it 'false' if you want all operations starts at PROPOSED, and then the cronjob be the one
# that checks if the operation intersects with other entities or not.
TRY_TO_ACTIVATE_NEW_OPERATIONS=

# true if you want to mock the sms sending
MOCK_SMS_SENDING=

# true if you want to mock the whatsapp sending
MOCK_WHATSAPP_SENDING=

# Twilio config to send sms and whatsapp messages
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_FROM_SMS_NUMBER=
TWILIO_FROM_WHATSAPP_NUMBER=
TWILIO_CONTENT_TEMPLATE_SID_aviso_vuelo_no_tripulado=

# - ENABLED: The system will check if an operation intersects with another
# entity. If it is the case, the operation status will be set as PENDING.
# - DISABLED: The system won't check if operation intersects with another
# entity.
# - If the variable is not defined or if it is set with another value,
# it will asume ENABLED.
STRATEGIC_DECONFLICT_MODE=
